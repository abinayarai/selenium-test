apply plugin: 'java'

import org.apache.tools.ant.taskdefs.condition.Os

repositories {
    mavenCentral()
}

dependencies {
    def gradleVersion = getProjectPropertyOrDefaultValue('gradleVersion', '3.4.0')
    def junitVersion = getProjectPropertyOrDefaultValue('junitVersion', '4.12')

    if (JavaVersion.current() == 1.8) {
        gradleVersion = '3.4.0'
    } else if (JavaVersion.current() == 1.7) {
        gradleVersion = '2.53.1'
    } else if (JavaVersion.current() == 1.6) {
        // Find a version that works with 1.6 but not a priority
        gradleVersion = ''
    } else {
        // Think about something to do for this
    }

    testCompile 'junit:junit:' + junitVersion
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: gradleVersion
    //
    // // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-chrome-driver
    //  compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '2.23.1'
    //
    // // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-firefox-driver
    // compile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '2.25.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

task start(type: JavaExec) {
    // mainClass = "Main"
    main = "Main"
    classpath = sourceSets.main.runtimeClasspath
}

def getProjectPropertyOrDefaultValue(String projectPropertyName, Object defaultValue) {
    if (project.hasProperty(projectPropertyName)) {
        return project.getProperties()[projectPropertyName]
    } else {
        return defaultValue
    }
}

test {
    doFirst {
        systemProperty "baseUrl", getProjectPropertyOrDefaultValue("url", "http://localhost:8080/")
        //println project.baseUrl
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            systemProperty "driverName", "src/resources/drivers/chromedriver.exe"
        }
        else {
            systemProperty "driverName", "src/resources/drivers/chromedriver"
        }
    }
}

task chrome {
    // println "This version " + JavaVersion.current()
}

//
// sourceSets {
//   test {
//     java {
//       srcDirs = ["main/test"]
//     }
//   }
// }

// test.doFirst {
//   systemProperty "webdriver.gecko.driver",
//     classpath.find {
//       it.name.contains("selenium-firefox-driver")
//     }.path
// }
